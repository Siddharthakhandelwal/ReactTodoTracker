Build a Subject Selection Survey Page for my career counseling app ‘Emerge’ in Replit. The app empowers students of all disciplines (CS, Biology, Arts, etc.) to shape their career paths with AI-driven guidance, using personalized profiles (skills, subjects, goals). The survey page appears on first login, collects user data, and determines the content of the main dashboard (e.g., ‘Your Journey,’ ‘Learning Goals,’ ‘What’s Next’). Here’s what to do:

Project Context:
App Name: ‘Emerge’—a career counseling app for all students.
Purpose: Collect user data on first login to personalize the dashboard (e.g., subjects like ‘Biology’ → ‘Biotech goals’).
Current State: React frontend (already in Replit with Tailwind CSS, 1440x900 resolution), no backend yet.
Survey Page Functionality:
Create a new page (src/Survey.jsx) for the survey, shown on first login.
Form Fields (stacked vertically):
Subjects: Multi-select dropdown (e.g., CS, Biology, Literature, Engineering, Arts, Math, Physics).
Interests/Hobbies: Text input (e.g., ‘reading’).
Skills: Text input (e.g., ‘lab work’).
Career Goal: Dropdown (options: ‘Internship,’ ‘Job,’ ‘Learn More,’ ‘Not Sure’).
Thinking Style: Radio buttons (‘Plan’ or ‘Flow’).
Extra Info: Optional textarea (e.g., ‘I love puzzles’).
Submit Button: ‘Start My Journey’—submits form data to the backend.
Redirect: After submission, redirect to the dashboard (/dashboard).
Backend Setup:
Add Flask (server.py, pip install flask flask-cors).
Proxy in package.json: "proxy": "http://localhost:5000".
Run both: .replit with run = "bash -c 'npm start & python server.py'".
Enable CORS: from flask_cors import CORS, CORS(app).
Database:
Create SQLite database (emerge.db) with tables:
users (id, username, password_hash, is_new, profile_pic, skills, subjects, interests, goal, thinking_style, extra_info).
journey (id, user_id, level, progress)—e.g., ‘Newbie at Biology’ (33%).
Seed: User (id=1, username=’Maya’, is_new=1)—is_new flags first login.
API Routes:
/api/check-new: GET—Check if user is new (is_new=1), return true/false.
/api/survey: POST—Save survey data to users (skills, subjects, interests, goal, thinking_style, extra_info), set is_new=0.
/api/user: GET—Return user data (for dashboard later).
Frontend Logic:
On app load, fetch /api/check-new—if true, show Survey.jsx; if false, show dashboard (App.jsx).
In Survey.jsx, render the form, submit to /api/survey, then redirect to /dashboard.
Dashboard Placeholder:
Update App.jsx (dashboard) to fetch /api/user and display user data (e.g., ‘Subjects: Biology’)—keep static for now.
Notes:
Use free tools: Flask, SQLite.
Survey data determines dashboard content (e.g., ‘Biology’ → ‘Biotech goals’)—I’ll add dynamic features (to-do list, trends) later.
Prepare for Gemini API (I’ll add later)—no AI yet.